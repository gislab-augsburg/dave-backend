/*
 * DAVE GEODATA EAI
 * DAVE GEODATA EAI - Service zum Abfragen von Geoinformationen
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: unbekannt@muenchen.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.muenchen.dave.geodateneai.gen.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/**
 * FeatureDtoStadtbezirkDto
 */
@JsonPropertyOrder({
        FeatureDtoStadtbezirkDto.JSON_PROPERTY_TYPE,
        FeatureDtoStadtbezirkDto.JSON_PROPERTY_GEOMETRY,
        FeatureDtoStadtbezirkDto.JSON_PROPERTY_PROPERTIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FeatureDtoStadtbezirkDto {
    public static final String JSON_PROPERTY_TYPE = "type";
    private String type;

    public static final String JSON_PROPERTY_GEOMETRY = "geometry";
    private FeatureDtoStadtbezirkDtoGeometry geometry;

    public static final String JSON_PROPERTY_PROPERTIES = "properties";
    private StadtbezirkDto properties;

    public FeatureDtoStadtbezirkDto() {
    }

    public FeatureDtoStadtbezirkDto type(String type) {

        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setType(String type) {
        this.type = type;
    }

    public FeatureDtoStadtbezirkDto geometry(FeatureDtoStadtbezirkDtoGeometry geometry) {

        this.geometry = geometry;
        return this;
    }

    /**
     * Get geometry
     *
     * @return geometry
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_GEOMETRY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public FeatureDtoStadtbezirkDtoGeometry getGeometry() {
        return geometry;
    }

    @JsonProperty(JSON_PROPERTY_GEOMETRY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGeometry(FeatureDtoStadtbezirkDtoGeometry geometry) {
        this.geometry = geometry;
    }

    public FeatureDtoStadtbezirkDto properties(StadtbezirkDto properties) {

        this.properties = properties;
        return this;
    }

    /**
     * Get properties
     *
     * @return properties
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PROPERTIES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public StadtbezirkDto getProperties() {
        return properties;
    }

    @JsonProperty(JSON_PROPERTY_PROPERTIES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProperties(StadtbezirkDto properties) {
        this.properties = properties;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeatureDtoStadtbezirkDto featureDtoStadtbezirkDto = (FeatureDtoStadtbezirkDto) o;
        return Objects.equals(this.type, featureDtoStadtbezirkDto.type) &&
                Objects.equals(this.geometry, featureDtoStadtbezirkDto.geometry) &&
                Objects.equals(this.properties, featureDtoStadtbezirkDto.properties);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, geometry, properties);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FeatureDtoStadtbezirkDto {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    geometry: ").append(toIndentedString(geometry)).append("\n");
        sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
