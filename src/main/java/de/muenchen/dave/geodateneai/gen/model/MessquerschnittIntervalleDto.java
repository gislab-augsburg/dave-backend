/*
 * DAVE GEODATA EAI
 * DAVE GEODATA EAI - Service zum Abfragen von Geoinformationen
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: unbekannt@muenchen.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.muenchen.dave.geodateneai.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.muenchen.dave.geodateneai.gen.model.MesswerteIntervallMessquerschnittDto;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * MessquerschnittIntervalleDto
 */
@JsonPropertyOrder({
  MessquerschnittIntervalleDto.JSON_PROPERTY_MESSQUERSCHNITT_ID,
  MessquerschnittIntervalleDto.JSON_PROPERTY_INTERVALLE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MessquerschnittIntervalleDto {
  public static final String JSON_PROPERTY_MESSQUERSCHNITT_ID = "messquerschnittId";
  private Long messquerschnittId;

  public static final String JSON_PROPERTY_INTERVALLE = "intervalle";
  private Map<String, List<MesswerteIntervallMessquerschnittDto>> intervalle = new HashMap<>();

  public MessquerschnittIntervalleDto() {
  }

  public MessquerschnittIntervalleDto messquerschnittId(Long messquerschnittId) {
    
    this.messquerschnittId = messquerschnittId;
    return this;
  }

   /**
   * Get messquerschnittId
   * @return messquerschnittId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSQUERSCHNITT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getMessquerschnittId() {
    return messquerschnittId;
  }


  @JsonProperty(JSON_PROPERTY_MESSQUERSCHNITT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessquerschnittId(Long messquerschnittId) {
    this.messquerschnittId = messquerschnittId;
  }


  public MessquerschnittIntervalleDto intervalle(Map<String, List<MesswerteIntervallMessquerschnittDto>> intervalle) {
    
    this.intervalle = intervalle;
    return this;
  }

  public MessquerschnittIntervalleDto putIntervalleItem(String key, List<MesswerteIntervallMessquerschnittDto> intervalleItem) {
    if (this.intervalle == null) {
      this.intervalle = new HashMap<>();
    }
    this.intervalle.put(key, intervalleItem);
    return this;
  }

   /**
   * Get intervalle
   * @return intervalle
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERVALLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, List<MesswerteIntervallMessquerschnittDto>> getIntervalle() {
    return intervalle;
  }


  @JsonProperty(JSON_PROPERTY_INTERVALLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntervalle(Map<String, List<MesswerteIntervallMessquerschnittDto>> intervalle) {
    this.intervalle = intervalle;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessquerschnittIntervalleDto messquerschnittIntervalleDto = (MessquerschnittIntervalleDto) o;
    return Objects.equals(this.messquerschnittId, messquerschnittIntervalleDto.messquerschnittId) &&
        Objects.equals(this.intervalle, messquerschnittIntervalleDto.intervalle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messquerschnittId, intervalle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessquerschnittIntervalleDto {\n");
    sb.append("    messquerschnittId: ").append(toIndentedString(messquerschnittId)).append("\n");
    sb.append("    intervalle: ").append(toIndentedString(intervalle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

